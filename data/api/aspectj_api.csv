id,class_url,description
1,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/AjType.html,T>  extends java.lang.reflect.Type_ java.lang.reflect.AnnotatedElement The runtime representation of a type (Aspect_ Class_ Interface_ Annotation_ Enum_ or Array) in an AspectJ  program.  
2,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/PointcutExpression.html,Represents an anonymous pointcut expression as used in pointcuts_ advice declarations_  declares_ and per-clauses  
3,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/PerClause.html,AspectJ runtime representation of the per-clause associated with an aspect.  
4,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/Pointcut.html,AspectJ runtime representation of a pointcut member inside a class or aspect.  
5,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/Advice.html,Runtime representation of an advice declaration inside an aspect  
6,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/InterTypeDeclaration.html,Represents an inter-type method_ field_ or constructor declared in an aspect.  
7,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/InterTypeMethodDeclaration.html,"Represents an inter-type method_ field_ or constructor declared in an aspect.  extends InterTypeDeclaration Represents an inter-type method declaration member within an aspect.  "
8,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/reflect/InterTypeDeclaration.html,Represents an inter-type method_ field_ or constructor declared in an aspect.  
9,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/InterTypeConstructorDeclaration.html,"Represents an inter-type method_ field_ or constructor declared in an aspect.   extends InterTypeDeclaration Runtime representation of an inter-type constructor member declared within an  aspect.  "
10,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/InterTypeFieldDeclaration.html,"Represents an inter-type method_ field_ or constructor declared in an aspect.   extends InterTypeDeclaration Represents an inter-type field declaration declared in an aspect.  "
11,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/SignaturePattern.html,AspectJ runtime representation of a signature pattern as used in various  aspect members (for example_ declare @method_ declare @field).  
12,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/TypePattern.html,AspectJ runtime representation of a type pattern as used in member declarations  such as declare parents.  
13,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/JoinPoint.html,"Provides reflective access to both the state available at a join point and  static information about it. This information is available from the body  of advice using the special form thisJoinPoint. The primary  use of this reflective information is for tracing and logging applications.      aspect Logging {  before(): within(com.bigboxco..*) && execution(public * *(..)) {  System.err.println(""entering: "" + thisJoinPoint);  System.err.println("" w/args: "" + thisJoinPoint.getArgs());  System.err.println("" at: "" + thisJoinPoint.getSourceLocation());  }  }    "
14,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/reflect/MemberSignature.html, extends Signature  
15,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/Signature.html,"Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger  "
16,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/reflect/CodeSignature.html," extends Signature  Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger   extends MemberSignature  "
17,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/reflect/SourceLocation.html,For defining code_ the class defined and location in a source file.  
18,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/WeavingAdaptor.html, extends java.lang.Object  implements org.aspectj.bridge.IMessageContext This adaptor allows the AspectJ compiler to be embedded in an existing system to facilitate load-time weaving. It provides an  interface for a weaving class loader to provide a classpath to be woven by a set of aspects. A callback is supplied to allow a  class loader to define classes generated by the compiler during the weaving process.    A weaving class loader should create a WeavingAdaptor before any classes are defined_ typically during construction.  The set of aspects passed to the adaptor is fixed for the lifetime of the adaptor although the classpath can be augmented. A  system property can be set to allow verbose weaving messages to be written to the console.  
19,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/loadtime/definition/Definition.html, extends java.lang.Object A POJO that contains raw strings from the XML (sort of XMLBean for our simple LTW DTD)  Author:  Alexandre Vasseur  
20,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/Traceable.html, 
21,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/ContextBasedMatcher.html,Pointcut expression interface for pointcut  expressions returned by a  PointcutDesignatorHandler. Provides an additional  matching method for matching based on context  information over and above that normally used  by AspectJ.  See Also:  MatchingContext  
22,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/MatchingContext.html,When extending AspectJ's pointcut parsing and  matching with custom PointcutDesignatorHandlers_  it may be necessary to match based on context information  at a join point not exposed simply by java.lang.reflect  member information or argument values. The matching context  interface provides an extension point for the specification  of additional shadow and join point context that can be  taken into account during the matching process.  See Also:  DefaultMatchingContext  
23,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/ShadowMatch.html,The result of asking a PointcutExpression to match at a shadow (method execution_  handler_ constructor call_ and so on).  
24,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/DeclareAnnotation.html,Kind                
25,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/DeclareErrorOrWarning.html,AspectJ runtime representation of a declare error or declare warning member  in an aspect.  
26,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/DeclareParents.html,A declare parents member defined inside an aspect  
27,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/DeclarePrecedence.html,AspectJ runtime representation of a declare precedence statement as   declared in an aspect.  
28,http://eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/reflect/DeclareSoft.html,AspectJ runtime representation of a declare soft member within an aspect.  
29,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/PointcutDesignatorHandler.html,The PointcutDesignator interface allows extension of the  AspectJ pointcut language so that third-party tools integrating  with AspectJ can add easily their own custom   domain-specific designators and have them interoperate seamlessly  with the standard AspectJ designators.  A pointcut designator can only be used for matching_ not for  binding.  
30,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/JoinPointMatch.html, Author:  colyer  The result of asking a ShadowMatch to match at a given join point.  
31,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/PointcutParser.html, extends java.lang.Object A PointcutParser can be used to build PointcutExpressions for a   user-defined subset of AspectJ's pointcut language  
32,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/PointcutParameter.html," Author:  colyer  Represents a parameter in a pointcut expression.  For example pointcut pc(String s) : .....; has a PointcutParameter of  name ""s"" and type String.  "
33,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/PointcutExpression.html,Represents an AspectJ pointcut expression and provides convenience methods to determine  whether or not the pointcut matches join points specified in terms of the  java.lang.reflect interfaces.  
34,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/ProceedingJoinPoint.html,"Provides reflective access to both the state available at a join point and  static information about it. This information is available from the body  of advice using the special form thisJoinPoint. The primary  use of this reflective information is for tracing and logging applications.      aspect Logging {  before(): within(com.bigboxco..*) && execution(public * *(..)) {  System.err.println(""entering: "" + thisJoinPoint);  System.err.println("" w/args: "" + thisJoinPoint.getArgs());  System.err.println("" at: "" + thisJoinPoint.getSourceLocation());  }  }    extends JoinPoint ProceedingJoinPoint exposes the proceed(..) method in order to support around advice in @AJ aspects  Author:  Alexandre Vasseur  "
35,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/reflect/MethodSignature.html," extends Signature  Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger  extends MemberSignature  extends Signature Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger  extends CodeSignature  "
36,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/reflect/ConstructorSignature.html," extends Signature  Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger  extends MemberSignature  extends Signature  Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger  extends CodeSignature  "
37,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/reflect/FieldSignature.html," extends Signature  Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger  extends MemberSignature  "
38,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/reflect/AdviceSignature.html," extends Signature  Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger   extends MemberSignature   extends Signature  Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger   extends CodeSignature  "
39,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/reflect/InitializerSignature.html," extends Signature   Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger   extends MemberSignature   extends Signature  Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger   extends CodeSignature Signature for static and instance initializers.  Static initializers have no parameters or exceptions_   so empty arrays are returned from the CodeSignature methods.  "
40,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/reflect/CatchClauseSignature.html,"Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger   extends Signature  "
41,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/reflect/LockSignature.html,"Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger   extends Signature  "
42,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/lang/reflect/UnlockSignature.html,"Represents the signature at a join point. This interface parallels  java.lang.reflect.Member.     This interface is typically used for tracing or logging applications  to obtain reflective information about the join point_ i.e. using  the j2se 1.4 java.util.logging API    aspect Logging {  Logger logger = Logger.getLogger(""MethodEntries"");    before(): within(com.bigboxco..*) && execution(public * *(..)) {  Signature sig = thisJoinPoint.getSignature();  logger.entering(sig.getDeclaringType().getName()_  sig.getName());  }  }        More detailed information about a specific kind of signature can  be obtained by casting this Signature object into one   of its more specific sub-types available in  org.aspectj.lang.reflect.  See Also:  Member_  java.util.logging.Logger   extends Signature  "
43,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/loadtime/WeavingURLClassLoader.html, extends org.aspectj.weaver.bcel.ExtensibleURLClassLoader  
44,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/TraceFactory.html, extends java.lang.Object  
45,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/Trace.html, 
46,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/loadtime/IWeavingContext.html,This class adds support to AspectJ for an OSGi environment  Author:  David Knibb  
47,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/GeneratedClassHandler.html,Interface implemented by weaving class loaders to allow classes generated by  the weaving process to be defined.  
48,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/AbstractTrace.html, extends java.lang.Object  implements Trace  
49,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/DefaultTrace.html," extends java.lang.Object  implements Trace   extends AbstractTrace  "
50,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/CommonsTraceFactory.html, extends TraceFactory  
51,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/CommonsTrace.html," extends java.lang.Object  implements Trace   extends AbstractTrace  "
52,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/DefaultTraceFactory.html, extends TraceFactory  
53,http://eclipse.org/aspectj/doc/released/runtime-api/org/aspectj/runtime/reflect/Factory.html, extends java.lang.Object  
54,http://eclipse.org/aspectj/doc/released/weaver-api/org/aspectj/weaver/tools/FuzzyBoolean.html," extends java.lang.Object This class implements a boolean that includes a ""maybe""  "
